// Mocks generated by Mockito 5.3.2 from annotations
// in reddit_modular/test/app/features/home/home_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dio/dio.dart' as _i4;
import 'package:mobx/mobx.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:reddit_modular/app/features/home/home_controller.dart' as _i7;
import 'package:reddit_modular/app/features/pagination/pagination_controller.dart'
    as _i5;
import 'package:reddit_modular/app/service/reddit_service.dart' as _i3;
import 'package:reddit_modular/app/shared/models/filter_model.dart' as _i9;
import 'package:reddit_modular/app/shared/models/post_model.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeReactiveContext_0 extends _i1.SmartFake
    implements _i2.ReactiveContext {
  _FakeReactiveContext_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRedditService_1 extends _i1.SmartFake implements _i3.RedditService {
  _FakeRedditService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDio_2 extends _i1.SmartFake implements _i4.Dio {
  _FakeDio_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PaginationController].
///
/// See the documentation for Mockito's code generation for more information.
class MockPaginationController extends _i1.Mock
    implements _i5.PaginationController {
  MockPaginationController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<dynamic> get posts => (super.noSuchMethod(
        Invocation.getter(#posts),
        returnValue: <dynamic>[],
      ) as List<dynamic>);
  @override
  set posts(List<dynamic>? _posts) => super.noSuchMethod(
        Invocation.setter(
          #posts,
          _posts,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);
  @override
  set isLoading(bool? _isLoading) => super.noSuchMethod(
        Invocation.setter(
          #isLoading,
          _isLoading,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get firstItemIndex => (super.noSuchMethod(
        Invocation.getter(#firstItemIndex),
        returnValue: 0,
      ) as int);
  @override
  set firstItemIndex(int? _firstItemIndex) => super.noSuchMethod(
        Invocation.setter(
          #firstItemIndex,
          _firstItemIndex,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get lastItemIndex => (super.noSuchMethod(
        Invocation.getter(#lastItemIndex),
        returnValue: 0,
      ) as int);
  @override
  set lastItemIndex(int? _lastItemIndex) => super.noSuchMethod(
        Invocation.setter(
          #lastItemIndex,
          _lastItemIndex,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_0(
          this,
          Invocation.getter(#context),
        ),
      ) as _i2.ReactiveContext);
  @override
  bool loadInitialData() => (super.noSuchMethod(
        Invocation.method(
          #loadInitialData,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i6.Future<void> loadListData() => (super.noSuchMethod(
        Invocation.method(
          #loadListData,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> onPreviousPage() => (super.noSuchMethod(
        Invocation.method(
          #onPreviousPage,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> onNextPage() => (super.noSuchMethod(
        Invocation.method(
          #onNextPage,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [HomeController].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeController extends _i1.Mock implements _i7.HomeController {
  MockHomeController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.RedditService get service => (super.noSuchMethod(
        Invocation.getter(#service),
        returnValue: _FakeRedditService_1(
          this,
          Invocation.getter(#service),
        ),
      ) as _i3.RedditService);
  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);
  @override
  set isLoading(bool? _isLoading) => super.noSuchMethod(
        Invocation.setter(
          #isLoading,
          _isLoading,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get reverseList => (super.noSuchMethod(
        Invocation.getter(#reverseList),
        returnValue: false,
      ) as bool);
  @override
  set reverseList(bool? _reverseList) => super.noSuchMethod(
        Invocation.setter(
          #reverseList,
          _reverseList,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i8.Post> get posts => (super.noSuchMethod(
        Invocation.getter(#posts),
        returnValue: <_i8.Post>[],
      ) as List<_i8.Post>);
  @override
  set posts(List<_i8.Post>? _posts) => super.noSuchMethod(
        Invocation.setter(
          #posts,
          _posts,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i9.Filter> get filters => (super.noSuchMethod(
        Invocation.getter(#filters),
        returnValue: <_i9.Filter>[],
      ) as List<_i9.Filter>);
  @override
  set filters(List<_i9.Filter>? _filters) => super.noSuchMethod(
        Invocation.setter(
          #filters,
          _filters,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_0(
          this,
          Invocation.getter(#context),
        ),
      ) as _i2.ReactiveContext);
  @override
  _i6.Future<dynamic> searchTerm(String? term) => (super.noSuchMethod(
        Invocation.method(
          #searchTerm,
          [term],
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
}

/// A class which mocks [RedditService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRedditService extends _i1.Mock implements _i3.RedditService {
  MockRedditService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_2(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i4.Dio);
  @override
  dynamic getContent(String? subreddit) => super.noSuchMethod(Invocation.method(
        #getContent,
        [subreddit],
      ));
  @override
  dynamic getComments(
    String? subreddit,
    String? id,
  ) =>
      super.noSuchMethod(Invocation.method(
        #getComments,
        [
          subreddit,
          id,
        ],
      ));
}
